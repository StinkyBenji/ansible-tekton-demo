---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/categories: Image Build
    tekton.dev/pipelines.minVersion: "0.37.4"
    tekton.dev/tags: image-build
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
    tekton.dev/displayName: buildah
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - name: IMAGE
      type: string
      description: Reference of the image buildah will produce.
    - name: IMAGE_TAG
      type: string
      description: Tag of the image buildah will produce.
    - name: BUILDER_IMAGE
      type: string
      description: The location of the buildah builder image.
      default: registry.redhat.io/rhel8/buildah@sha256:99cae35f40c7ec050fed3765b2b27e0b8bbea2aa2da7c16408e2ca13c60ff8ee
    - name: STORAGE_DRIVER
      type: string
      description: Set buildah storage driver
      default: overlay
    - name: DOCKERFILE
      type: string
      description: Path to the Dockerfile to build.
      default: Dockerfile
    - name: CONTEXT
      type: string
      description: Path to the directory to use as context.
      default: .
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
    - name: BUILD_EXTRA_ARGS
      description: Extra parameters passed for the build command when building images.
      default: ""
    - name: PUSH_EXTRA_ARGS
      description: Extra parameters passed for the push command when pushing images.
      type: string
      default: ""
    - name: SKIP_PUSH
      description: Skip pushing the built image
      default: "false"
  workspaces:
    - name: source
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry.
        The file should be placed at the root of the Workspace with name config.json.
      optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: Image repository where the built image would be pushed to
  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        #!/bin/sh

        [ $(workspaces.dockerconfig.bound) = true ] && DOCKER_CONFIG="$(workspaces.dockerconfig.path)" && export DOCKER_CONFIG

        buildah --storage-driver=$(params.STORAGE_DRIVER) bud $(params.BUILD_EXTRA_ARGS) \
        --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)

        tee $(results.IMAGE_DIGEST.path) < /tmp/image-digest
        printf '%s' $(params.IMAGE) | tee $(results.IMAGE_URL.path)

        [ $(params.SKIP_PUSH) = true ] && echo "Push skipped" && exit 0
        # push the image (CERT_DIR_FLAG should be omitted if empty and PUSH_EXTRA_ARGS can contain multiple args)
        # shellcheck disable=SC2046,SC2086
        buildah ${CERT_DIR_FLAG} --storage-driver=$(params.STORAGE_DRIVER) push $(params.PUSH_EXTRA_ARGS) \
        --tls-verify=$(params.TLSVERIFY) --digestfile /tmp/image-digest $(params.IMAGE) docker://$(params.IMAGE)

        tee $(results.IMAGE_DIGEST.path) < /tmp/image-digest
        printf '%s' $(params.IMAGE) | tee $(results.IMAGE_URL.path)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        capabilities:
          add: ["SETFCAP"]
  volumes:
    - name: varlibcontainers
      emptyDir: {}
